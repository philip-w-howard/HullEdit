Demoing Pull request
Here's another change

Features
    Separate file for each sheet when outputting panels

    Setup dialog for STL output
    
	DXF output

	Status bar at the bottom showing x,y,z location, etc.

	DONE: Data binding to force redraw on edit?
		DOABLE? This should also remove SetHull?

	Panels that start at a point (instead of an edge). See 16'SPORT.HUL

	Dynamically update views while moving handle.

	Spline bulkhead for bow/stern (Not in Carson Hull)

	Add/position bulkheads

	Bulkhead: fix top/bottom to center line
	
	Create floor/deck for non-centerline bulkheads

	Splines.GetAt(coord)

	Rotate perspective x,y with mouse movement

	Undo/Redo capability

Code/Implementation Enhancements
    Use data binding for more dialogs (see resize as example)

	Serializability:
		Mark object as [Serializable()]
		Can mark individual fields as [NonSerialized()]
	Does Bulkhead need to implement INotifyPropertyChanged?
	Use foreach loops where appropriate
		Started, need to finish.
	MVC: Model (data) View (appearance) Control (user interaction): should be separate classes.
	MVVM Model, View, ViewModel: VM translates model for the view.

	EXCEPTIONS:
		Throw appropriate ones, and handle all of them.

	WPF can do rotations. Do I need to do them manually?
	WPF can do scaling, but it seems to scale pen widths. Can I use WPF scaling without managing pen widths?

Bugs
	going to a small window size sometimes obscures the perspective view (appears to be drawn off-screen).
	
??????????????????????????????????
For later version???
Rectangle
	Cursor: change mouse cursor
	Fill
	Height
	IsEnabled
	IsHitTestVisible
	IsMouseOver
	Width
	
	AddHandler
	OnDragEnter, Leave, Over 
	OnDrop
	mouseMoveButton.MouseEnter += new MouseEventHandler(OnMouseExampleMouseEnter);

	Can always use Touch events;

	IsManipulationEnabled
	ManipulationStarting, Started, Delta, IniertiaStarting, Completed, BoundaryFeedback

********************************************
Serialization stuff
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            /*
        public int numBulkheads { get; private set; }
        public int numChines { get; private set; }

        private List<Bulkhead> m_bulkheads;
        private List<Point3DCollection> m_chines;

        public Bulkhead GetBulkhead(int index) { return m_bulkheads[index]; }
        public Point3DCollection GetChine(int index) { return m_chines[index]; }

        private bool m_IsValid;
        public bool IsValid

            */
            info.AddValue("isValid", m_IsValid, typeof(bool));
            if (IsValid)
            {
                info.AddValue("numBulkheads", numBulkheads, typeof(int));
                info.AddValue("numChines", numChines, typeof(int));
                info.AddValue("bulkheads", m_bulkheads, typeof(List<Bulkhead>));
            }
        }

        public XmlSchema GetSchema()
        {
            throw new NotImplementedException();
        }

        public void ReadXml(XmlReader reader)
        {
            m_IsValid = (bool)info.GetValue("isValid", typeof(bool));
            if (m_IsValid)
            {
                numBulkheads = (int)info.GetValue("numBulkheads", typeof(int));
                numChines = (int)info.GetValue("nunChines", typeof(int));
                m_bulkheads = (List<Bulkhead>)info.GetValue("bulkheads", typeof(List<Bulkhead>));
            }
        }

        public void WriteXml(XmlWriter writer)
        {
            writer.WriteAttributeString("isValid", m_IsValid.ToString());

            if (IsValid)
            {
                writer.WriteElementString("numBulkheads", "" + numBulkheads);
                writer.WriteElementString("numChines", "" + numChines);
                //writer.WriteValue(m_bulkheads);
            }

        }

        public Hull(SerializationInfo info, StreamingContext context)
        {
            m_IsValid = (bool)info.GetValue("isValid", typeof(bool));
            if (m_IsValid)
            {
                numBulkheads = (int)info.GetValue("numBulkheads", typeof(int));
                numChines = (int)info.GetValue("nunChines", typeof(int));
                m_bulkheads = (List<Bulkhead>)info.GetValue("bulkheads", typeof(List<Bulkhead>));
            }
        }
